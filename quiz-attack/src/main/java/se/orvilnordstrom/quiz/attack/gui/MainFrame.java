package se.orvilnordstrom.quiz.attack.gui;

import java.awt.Color;
import java.awt.event.KeyEvent;
import javax.swing.BorderFactory;
import javax.swing.SwingUtilities;
import javax.swing.border.Border;
import se.orvilnordstrom.quiz.attack.game.QuizGame;
import se.orvilnordstrom.quiz.attack.game.QuizGameController;

/**
 *
 * @author Orville Sebastian Nordstr√∂m 
 */
public class MainFrame extends javax.swing.JFrame {

    /** Creates new form MainFrame */
    public MainFrame() {
        initComponents();
    }

    /** This method is called from within the constructor to
     * initialize the form.
     * WARNING: Do NOT modify this code. The content of this method is
     * always regenerated by the Form Editor.
     */
    @SuppressWarnings("unchecked")
    // <editor-fold defaultstate="collapsed" desc="Generated Code">//GEN-BEGIN:initComponents
    private void initComponents() {

        answerJTextField = new javax.swing.JTextField();
        okJButton = new javax.swing.JButton();
        quizJLabel = new javax.swing.JLabel();
        timerJLabel = new javax.swing.JLabel();
        pointsJLabel = new javax.swing.JLabel();
        correctAnswerJLabel = new javax.swing.JLabel();

        setDefaultCloseOperation(javax.swing.WindowConstants.EXIT_ON_CLOSE);

        answerJTextField.setToolTipText("Press enter to give the answer.");
        answerJTextField.addKeyListener(new java.awt.event.KeyAdapter() {
            public void keyPressed(java.awt.event.KeyEvent evt) {
                answerJTextFieldKeyPressed(evt);
            }
        });

        okJButton.setText("Answer");
        okJButton.addActionListener(new java.awt.event.ActionListener() {
            public void actionPerformed(java.awt.event.ActionEvent evt) {
                okJButtonActionPerformed(evt);
            }
        });

        quizJLabel.setText("Quiz text");

        timerJLabel.setFont(new java.awt.Font("Dialog", 1, 18)); // NOI18N
        timerJLabel.setHorizontalAlignment(javax.swing.SwingConstants.CENTER);
        timerJLabel.setText("14:00");

        pointsJLabel.setFont(new java.awt.Font("Dialog", 0, 10)); // NOI18N
        pointsJLabel.setText("Points");

        correctAnswerJLabel.setFont(new java.awt.Font("Dialog", 0, 10)); // NOI18N
        correctAnswerJLabel.setHorizontalAlignment(javax.swing.SwingConstants.CENTER);
        correctAnswerJLabel.setText("Answers");

        javax.swing.GroupLayout layout = new javax.swing.GroupLayout(getContentPane());
        getContentPane().setLayout(layout);
        layout.setHorizontalGroup(
            layout.createParallelGroup(javax.swing.GroupLayout.Alignment.LEADING)
            .addGroup(layout.createSequentialGroup()
                .addContainerGap()
                .addGroup(layout.createParallelGroup(javax.swing.GroupLayout.Alignment.LEADING)
                    .addGroup(layout.createParallelGroup(javax.swing.GroupLayout.Alignment.TRAILING, false)
                        .addComponent(quizJLabel, javax.swing.GroupLayout.DEFAULT_SIZE, 146, Short.MAX_VALUE)
                        .addComponent(answerJTextField))
                    .addComponent(pointsJLabel, javax.swing.GroupLayout.PREFERRED_SIZE, 60, javax.swing.GroupLayout.PREFERRED_SIZE))
                .addPreferredGap(javax.swing.LayoutStyle.ComponentPlacement.UNRELATED)
                .addGroup(layout.createParallelGroup(javax.swing.GroupLayout.Alignment.LEADING, false)
                    .addComponent(okJButton, javax.swing.GroupLayout.DEFAULT_SIZE, javax.swing.GroupLayout.DEFAULT_SIZE, Short.MAX_VALUE)
                    .addComponent(timerJLabel, javax.swing.GroupLayout.DEFAULT_SIZE, javax.swing.GroupLayout.DEFAULT_SIZE, Short.MAX_VALUE)
                    .addComponent(correctAnswerJLabel, javax.swing.GroupLayout.DEFAULT_SIZE, javax.swing.GroupLayout.DEFAULT_SIZE, Short.MAX_VALUE))
                .addContainerGap(10, Short.MAX_VALUE))
        );
        layout.setVerticalGroup(
            layout.createParallelGroup(javax.swing.GroupLayout.Alignment.LEADING)
            .addGroup(javax.swing.GroupLayout.Alignment.TRAILING, layout.createSequentialGroup()
                .addContainerGap(javax.swing.GroupLayout.DEFAULT_SIZE, Short.MAX_VALUE)
                .addGroup(layout.createParallelGroup(javax.swing.GroupLayout.Alignment.BASELINE)
                    .addComponent(pointsJLabel)
                    .addComponent(correctAnswerJLabel))
                .addPreferredGap(javax.swing.LayoutStyle.ComponentPlacement.RELATED)
                .addGroup(layout.createParallelGroup(javax.swing.GroupLayout.Alignment.BASELINE)
                    .addComponent(quizJLabel)
                    .addComponent(timerJLabel, javax.swing.GroupLayout.PREFERRED_SIZE, 30, javax.swing.GroupLayout.PREFERRED_SIZE))
                .addPreferredGap(javax.swing.LayoutStyle.ComponentPlacement.UNRELATED)
                .addGroup(layout.createParallelGroup(javax.swing.GroupLayout.Alignment.BASELINE)
                    .addComponent(answerJTextField, javax.swing.GroupLayout.PREFERRED_SIZE, javax.swing.GroupLayout.DEFAULT_SIZE, javax.swing.GroupLayout.PREFERRED_SIZE)
                    .addComponent(okJButton))
                .addContainerGap())
        );

        pack();
    }// </editor-fold>//GEN-END:initComponents

    private void okJButtonActionPerformed(java.awt.event.ActionEvent evt) {//GEN-FIRST:event_okJButtonActionPerformed
        answer();
    }//GEN-LAST:event_okJButtonActionPerformed

    private void answerJTextFieldKeyPressed(java.awt.event.KeyEvent evt) {//GEN-FIRST:event_answerJTextFieldKeyPressed
        if(evt.getKeyCode() == KeyEvent.VK_ENTER) {
            answer();
        }
    }//GEN-LAST:event_answerJTextFieldKeyPressed

    public void startGui() {
        
        setGameController();
        
        setResizable(false);
        
        setLocationRelativeTo(null);
        
        setVisible(true); 
        
    }
    
    private void setGameController() {
        
        controller = new QuizGameController((QuizGame quizGame)-> {
            
            try {
            
                SwingUtilities.invokeAndWait(()->{
                    repaintInfo(quizGame);
                });

            } catch(Exception ex) {
            }
            
            return true;
            
        });
        
        new Thread(controller).start();
        
    }

    public void repaintInfo(QuizGame quizGame) {
        
        if(quizGame == null) {
            return;
        }
        
        pointsJLabel.setText("Points: " + quizGame.getPoints());
        
        correctAnswerJLabel.setText("Answers: " + quizGame.getCorrectAnswerCount());
        
        long remainingTimeMillis = quizGame.getRemainingAnswerTime();
        
        long seconds = remainingTimeMillis / 1000;
        
        long centiSeconds = (remainingTimeMillis % 1000) / 10;
        
        String timerText = String.format("%02d", seconds) + ":" + String.format("%02d", centiSeconds);
        
        timerJLabel.setText(timerText);
        
        if(quizGame.isRunning() && remainingTimeMillis < 3 * 1000) {
            timerJLabel.setForeground(Color.RED);
        } else {
            timerJLabel.setForeground(Color.BLACK);
        }
                
        if(quizGame.isRunning()) {
            
            okJButton.setText("GO");
            
            quizJLabel.setText(quizGame.getCurrentQuiz());
            
        } else {
            
            okJButton.setText("Start");
            
            quizJLabel.setText("Press enter to answer.");
            
        }
        
    }
        
    private void answer() {
        
        boolean correct = controller.answer(answerJTextField.getText());
        
        if(!correct) {
            
            answerJTextField.setBorder(ERROR_BORDER);
            
        } else {
            
            answerJTextField.setBorder(DEFAULT_BORDER);
            
            answerJTextField.setText("");
            
        }
        
    }
    
    private QuizGameController controller;
    
    private static final Border ERROR_BORDER = BorderFactory.createLineBorder(Color.RED);
    
    private static final Border DEFAULT_BORDER = BorderFactory.createLineBorder(Color.BLACK);
    
    // Variables declaration - do not modify//GEN-BEGIN:variables
    private javax.swing.JTextField answerJTextField;
    private javax.swing.JLabel correctAnswerJLabel;
    private javax.swing.JButton okJButton;
    private javax.swing.JLabel pointsJLabel;
    private javax.swing.JLabel quizJLabel;
    private javax.swing.JLabel timerJLabel;
    // End of variables declaration//GEN-END:variables

}
